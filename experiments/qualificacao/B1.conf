simulation {
  name = "Simulation of EggHolder Function",
  simulation = "01/01/2011",
  description = "In order of check if architecture is safe this simulation will create X agents and 1 initial region",
  type = 1,
  hasCooperation = true
  executionTime = 2000
  nodes = 2
  extractPath = "data/"
  problem {
    name = "Function"
    type = "Real"
    isMax = false
    classPath = "br.cefetmg.lsi.bimasco.core.problems.FunctionProblem"
    solutionAnalyserName = "Function"
    problemData = [
      [ "XinSheYang03" ],
      [ 2 ],
      [ 10.0 ],
      [10.0, 10.0],
      [-20.0, 20.0],
      [-20.0, 20.0]]
  }

  region {
    minRegions = 5
    maxRegions = 100
    minSolutionsToSplit = 30
  }


  agents = [
    {
      count = 4,
      name = "GRASP_TEST",
      metaHeuristicName = "GRASP",
      lifetime = 1000,
      isPopulationMetaHeuristic = false,

      isConstructorMetaHeuristic = true,
      metaHeuristicParameters {
        maxIterations {
          type = "int",
          value = 100
        }
        maxIterationsSM {
          type = "int"
          value = 50
        }
        time {
          type = "double"
          value = 100.0
        }
        f0 {
          type = "double"
          value = -959.6407
        }
        alpha {
          type = "double"
          value = 0.5
        }
        stopConditionName {
          type = "String"
          value = "MaxIterations"
        }
        neighborsListName {
          type = "String"
          value =  "Step"
        }
        localSearchName {
          type = "String"
          value = "Random"
        }
        localSearchIterations {
          type = "int",
          value = 10
        }
        candidatesListName {
          type = "String"
          value = "Step"
        }
      },
      solutionManipulation {
        neighborLocalSearchName {
          type  = "Random"
          isActive = true
        }
      }
    },
    {
      count = 2
      name = "ILS_TEST"
      metaHeuristicName = "ILS"
      isPopulationMetaHeuristic = false
      isConstructorMetaHeuristic = false
      metaHeuristicParameters {
        maxIterations {
          type  = "int"
          value = 20
        }
        maxIterationsSM {
          type = "int"
          value = 20
        }
        time {
          type = "double"
          value = 100.0
        },
        f0 {
          type = "double"
          value = -959.6407
        }
        stopConditionName {
          type = "String"
          value = "MaxIterations"
        }
        disturbLevel {
          type = "int"
          value = 10
        },
        localSearchName {
          type = "String"
          value = "Random"
        }
      }
      solutionManipulation {
        neighborLocalSearchName {
          type = "Random"
          isActive = true
        }
        disturb {
          type = "Random"
          isActive = true
        }
        chooseInitialSolution {
          type = "Random"
          isActive =  true
        }
      }
    },
    {
      count = 2
      name = "ILS_TEST"
      metaHeuristicName = "ILS"
      isPopulationMetaHeuristic = false
      isConstructorMetaHeuristic = false
      metaHeuristicParameters {
        maxIterations {
          type  = "int"
          value = 100
        }
        maxIterationsSM {
          type = "int"
          value = 100
        }
        time {
          type = "double"
          value = 100.0
        },
        f0 {
          type = "double"
          value = -959.6407
        }
        stopConditionName {
          type = "String"
          value = "MaxIterations"
        }
        disturbLevel {
          type = "int"
          value = 7
        },
        localSearchName {
          type = "String"
          value = "Random"
        }
      }
      solutionManipulation {
        neighborLocalSearchName {
          type = "Random"
          isActive = true
        }
        disturb {
          type = "Random"
          isActive = true
        }
        chooseInitialSolution {
          type = "Random"
          isActive = true
        }
      }
    },
    {
      count = 2
      name = "AG_PTeste"
      metaHeuristicName = "AG_P"
      isPopulationMetaHeuristic = true
      isConstructorMetaHeuristic = false
      metaHeuristicParameters {
        maxIterations  {
          type = "int"
          value = 300
        }

        maxIterationsWI {
          type = "int"
          value = 15
        }

        time {
          type = "double"
          value = 60.0
        }

        f0 {
          type = "double"
          value = 0.5
        }

        stopConditionName {
          type = "String"
          value = "MaxIterations"
        }

        parentsSize {
          type = "int"
          value = 2
        }

        populationSize {
          type = "int"
          value = 20
        }

        mutationTax {
          type = "double"
          value = 0.2
        },
        crossoverTax {
          type = "double"
          value = 0.7
        }
      }

      solutionManipulation {
        chooseInitialSolution {
          type = "Random"
          isActive = true
        }
        nextPopulationChoice {
          type = "Random"
          isActive = true
        }
        parentsChoice {
          type = "Random"
          isActive = true
        }
        mutationChoice {
          type = "Random"
          isActive = true
        }
        crossoverChoice {
          type = "BinaryCrossover"
          isActive = true
        }
      }
    },
    {
      count = 2
      name = "AG_PTeste"
      metaHeuristicName = "AG_P"
      isPopulationMetaHeuristic = true
      isConstructorMetaHeuristic = false
      metaHeuristicParameters {
        maxIterations  {
          type = "int"
          value = 300
        }

        maxIterationsWI {
          type = "int"
          value = 15
        }

        time {
          type = "double"
          value = 60.0
        }

        f0 {
          type = "double"
          value = 0.5
        }

        stopConditionName {
          type = "String"
          value = "MaxIterations"
        }

        parentsSize {
          type = "int"
          value = 2
        }

        populationSize {
          type = "int"
          value = 30
        }

        mutationTax {
          type = "double"
          value = 0.1
        },
        crossoverTax {
          type = "double"
          value = 0.8
        }
      }

      solutionManipulation {
        chooseInitialSolution {
          type = "Random"
          isActive = true
        }
        nextPopulationChoice {
          type = "Random"
          isActive = true
        }
        parentsChoice {
          type = "Random"
          isActive = true
        }
        mutationChoice {
          type = "Random"
          isActive = true
        }
        crossoverChoice {
          type = "BinaryCrossover"
          isActive = true
        }
      }
    }
  ]
}